'use strict';

// user-tests.js
var chai = require('chai');
var chaiAsPromised = require("chai-as-promised");
var assert = chai.assert;
chai.use(chaiAsPromised);
var should = chai.should();
var expect = chai.expect;
var users = require('../server/routes/users.js');
var userSchema = require('../server/models/User.js');

describe('can register and signin users', function () {

  beforeEach(function (done) {
    //runs before all tests in this block
    users.doSignup('register', 'registerpw').should.be.fulfilled.then(function (user) {
      done();
    });
  });

  afterEach(function (done) {
    userSchema.remove({}).then(function () {
      done();
    });
  });

  it('it should successfully generate a room id', function (done) {
    users.generateRoomId('testusername').should.be.fulfilled.then(function (roomid) {
      expect(roomid).to.be.a('string');
    }).should.notify(done);
  });

  it('it should generate a token', function (done) {
    expect(users.generateToken('string')).to.be.a('string');
    done();
  });

  it('it should register a new user', function (done) {
    users.doSignup('testusername', 'testpassword').should.be.fulfilled.then(function (user) {
      expect(user).to.have.property('username');
    }).should.notify(done);
  });

  it('it should signin', function (done) {
    users.doSignin('register', 'registerpw').should.be.fulfilled.then(function (signin) {
      expect(signin).to.have.property('username');
    }).should.notify(done);
  });

  it('it should fail with a non-existent user', function (done) {
    users.doSignin('baduser', 'registerpw').should.be.rejected.and.notify(done);
  });
  it('it should fail with a bad password', function (done) {
    users.doSignin('register', 'badpassword').should.be.rejected.and.notify(done);
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3Rlc3QvdXNlci10ZXN0cy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxJQUFJLE9BQU8sUUFBUSxNQUFSLENBQVg7QUFDQSxJQUFJLGlCQUFpQixRQUFRLGtCQUFSLENBQXJCO0FBQ0EsSUFBSSxTQUFTLEtBQUssTUFBbEI7QUFDQSxLQUFLLEdBQUwsQ0FBUyxjQUFUO0FBQ0EsSUFBSSxTQUFTLEtBQUssTUFBTCxFQUFiO0FBQ0EsSUFBSSxTQUFTLEtBQUssTUFBbEI7QUFDQSxJQUFJLFFBQVEsUUFBUSwyQkFBUixDQUFaO0FBQ0EsSUFBSSxhQUFhLFFBQVEsMEJBQVIsQ0FBakI7O0FBRUEsU0FBUywrQkFBVCxFQUEwQyxZQUFXOztBQUVuRCxhQUFXLFVBQVMsSUFBVCxFQUFlOztBQUV4QixVQUFNLFFBQU4sQ0FBZSxVQUFmLEVBQTJCLFlBQTNCLEVBQXlDLE1BQXpDLENBQWdELEVBQWhELENBQW1ELFNBQW5ELENBQTZELElBQTdELENBQWtFLFVBQVMsSUFBVCxFQUFlO0FBQy9FO0FBQ0QsS0FGRDtBQUdELEdBTEQ7O0FBT0EsWUFBVSxVQUFTLElBQVQsRUFBZTtBQUN2QixlQUFXLE1BQVgsQ0FBa0IsRUFBbEIsRUFBc0IsSUFBdEIsQ0FBMkIsWUFBVTtBQUNuQztBQUNELEtBRkQ7QUFHRCxHQUpEOztBQU1BLEtBQUcsMkNBQUgsRUFBZ0QsVUFBUyxJQUFULEVBQWU7QUFDN0QsVUFBTSxjQUFOLENBQXFCLGNBQXJCLEVBQXFDLE1BQXJDLENBQTRDLEVBQTVDLENBQStDLFNBQS9DLENBQXlELElBQXpELENBQThELFVBQVMsTUFBVCxFQUFpQjtBQUM3RSxhQUFPLE1BQVAsRUFBZSxFQUFmLENBQWtCLEVBQWxCLENBQXFCLENBQXJCLENBQXVCLFFBQXZCO0FBQ0QsS0FGRCxFQUVHLE1BRkgsQ0FFVSxNQUZWLENBRWlCLElBRmpCO0FBR0QsR0FKRDs7QUFNQSxLQUFHLDRCQUFILEVBQWlDLFVBQVMsSUFBVCxFQUFlO0FBQzlDLFdBQU8sTUFBTSxhQUFOLENBQW9CLFFBQXBCLENBQVAsRUFBc0MsRUFBdEMsQ0FBeUMsRUFBekMsQ0FBNEMsQ0FBNUMsQ0FBOEMsUUFBOUM7QUFDQTtBQUNELEdBSEQ7O0FBS0EsS0FBRywrQkFBSCxFQUFvQyxVQUFTLElBQVQsRUFBZTtBQUNqRCxVQUFNLFFBQU4sQ0FBZSxjQUFmLEVBQStCLGNBQS9CLEVBQStDLE1BQS9DLENBQXNELEVBQXRELENBQXlELFNBQXpELENBQW1FLElBQW5FLENBQXdFLFVBQVMsSUFBVCxFQUFlO0FBQ3JGLGFBQU8sSUFBUCxFQUFhLEVBQWIsQ0FBZ0IsSUFBaEIsQ0FBcUIsUUFBckIsQ0FBOEIsVUFBOUI7QUFDRCxLQUZELEVBRUcsTUFGSCxDQUVVLE1BRlYsQ0FFaUIsSUFGakI7QUFHRCxHQUpEOztBQU1BLEtBQUcsa0JBQUgsRUFBdUIsVUFBUyxJQUFULEVBQWU7QUFDcEMsVUFBTSxRQUFOLENBQWUsVUFBZixFQUEyQixZQUEzQixFQUF5QyxNQUF6QyxDQUFnRCxFQUFoRCxDQUFtRCxTQUFuRCxDQUE2RCxJQUE3RCxDQUFrRSxVQUFTLE1BQVQsRUFBaUI7QUFDakYsYUFBTyxNQUFQLEVBQWUsRUFBZixDQUFrQixJQUFsQixDQUF1QixRQUF2QixDQUFnQyxVQUFoQztBQUNELEtBRkQsRUFFRyxNQUZILENBRVUsTUFGVixDQUVpQixJQUZqQjtBQUdELEdBSkQ7O0FBTUEsS0FBRyx5Q0FBSCxFQUE4QyxVQUFTLElBQVQsRUFBZTtBQUMzRCxVQUFNLFFBQU4sQ0FBZSxTQUFmLEVBQTBCLFlBQTFCLEVBQXdDLE1BQXhDLENBQStDLEVBQS9DLENBQWtELFFBQWxELENBQTJELEdBQTNELENBQStELE1BQS9ELENBQXNFLElBQXRFO0FBQ0QsR0FGRDtBQUdBLEtBQUcsb0NBQUgsRUFBeUMsVUFBUyxJQUFULEVBQWU7QUFDdEQsVUFBTSxRQUFOLENBQWUsVUFBZixFQUEyQixhQUEzQixFQUEwQyxNQUExQyxDQUFpRCxFQUFqRCxDQUFvRCxRQUFwRCxDQUE2RCxHQUE3RCxDQUFpRSxNQUFqRSxDQUF3RSxJQUF4RTtBQUNELEdBRkQ7QUFLRCxDQTlDRCIsImZpbGUiOiJ1c2VyLXRlc3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdXNlci10ZXN0cy5qc1xudmFyIGNoYWkgPSByZXF1aXJlKCdjaGFpJyk7XG52YXIgY2hhaUFzUHJvbWlzZWQgPSByZXF1aXJlKFwiY2hhaS1hcy1wcm9taXNlZFwiKTtcbnZhciBhc3NlcnQgPSBjaGFpLmFzc2VydDtcbmNoYWkudXNlKGNoYWlBc1Byb21pc2VkKTtcbnZhciBzaG91bGQgPSBjaGFpLnNob3VsZCgpO1xudmFyIGV4cGVjdCA9IGNoYWkuZXhwZWN0O1xudmFyIHVzZXJzID0gcmVxdWlyZSgnLi4vc2VydmVyL3JvdXRlcy91c2Vycy5qcycpO1xudmFyIHVzZXJTY2hlbWEgPSByZXF1aXJlKCcuLi9zZXJ2ZXIvbW9kZWxzL1VzZXIuanMnKTtcblxuZGVzY3JpYmUoJ2NhbiByZWdpc3RlciBhbmQgc2lnbmluIHVzZXJzJywgZnVuY3Rpb24oKSB7XG5cbiAgYmVmb3JlRWFjaChmdW5jdGlvbihkb25lKSB7XG4gICAgLy9ydW5zIGJlZm9yZSBhbGwgdGVzdHMgaW4gdGhpcyBibG9ja1xuICAgIHVzZXJzLmRvU2lnbnVwKCdyZWdpc3RlcicsICdyZWdpc3RlcnB3Jykuc2hvdWxkLmJlLmZ1bGZpbGxlZC50aGVuKGZ1bmN0aW9uKHVzZXIpIHtcbiAgICAgIGRvbmUoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKGZ1bmN0aW9uKGRvbmUpIHtcbiAgICB1c2VyU2NoZW1hLnJlbW92ZSh7fSkudGhlbihmdW5jdGlvbigpe1xuICAgICAgZG9uZSgpO1xuICAgIH0pO1xuICB9KTtcblxuICBpdCgnaXQgc2hvdWxkIHN1Y2Nlc3NmdWxseSBnZW5lcmF0ZSBhIHJvb20gaWQnLCBmdW5jdGlvbihkb25lKSB7XG4gICAgdXNlcnMuZ2VuZXJhdGVSb29tSWQoJ3Rlc3R1c2VybmFtZScpLnNob3VsZC5iZS5mdWxmaWxsZWQudGhlbihmdW5jdGlvbihyb29taWQpIHtcbiAgICAgIGV4cGVjdChyb29taWQpLnRvLmJlLmEoJ3N0cmluZycpO1xuICAgIH0pLnNob3VsZC5ub3RpZnkoZG9uZSk7XG4gIH0pO1xuXG4gIGl0KCdpdCBzaG91bGQgZ2VuZXJhdGUgYSB0b2tlbicsIGZ1bmN0aW9uKGRvbmUpIHtcbiAgICBleHBlY3QodXNlcnMuZ2VuZXJhdGVUb2tlbignc3RyaW5nJykpLnRvLmJlLmEoJ3N0cmluZycpO1xuICAgIGRvbmUoKTtcbiAgfSk7XG5cbiAgaXQoJ2l0IHNob3VsZCByZWdpc3RlciBhIG5ldyB1c2VyJywgZnVuY3Rpb24oZG9uZSkge1xuICAgIHVzZXJzLmRvU2lnbnVwKCd0ZXN0dXNlcm5hbWUnLCAndGVzdHBhc3N3b3JkJykuc2hvdWxkLmJlLmZ1bGZpbGxlZC50aGVuKGZ1bmN0aW9uKHVzZXIpIHtcbiAgICAgIGV4cGVjdCh1c2VyKS50by5oYXZlLnByb3BlcnR5KCd1c2VybmFtZScpO1xuICAgIH0pLnNob3VsZC5ub3RpZnkoZG9uZSk7XG4gIH0pO1xuXG4gIGl0KCdpdCBzaG91bGQgc2lnbmluJywgZnVuY3Rpb24oZG9uZSkge1xuICAgIHVzZXJzLmRvU2lnbmluKCdyZWdpc3RlcicsICdyZWdpc3RlcnB3Jykuc2hvdWxkLmJlLmZ1bGZpbGxlZC50aGVuKGZ1bmN0aW9uKHNpZ25pbikge1xuICAgICAgZXhwZWN0KHNpZ25pbikudG8uaGF2ZS5wcm9wZXJ0eSgndXNlcm5hbWUnKTtcbiAgICB9KS5zaG91bGQubm90aWZ5KGRvbmUpO1xuICB9KTtcblxuICBpdCgnaXQgc2hvdWxkIGZhaWwgd2l0aCBhIG5vbi1leGlzdGVudCB1c2VyJywgZnVuY3Rpb24oZG9uZSkge1xuICAgIHVzZXJzLmRvU2lnbmluKCdiYWR1c2VyJywgJ3JlZ2lzdGVycHcnKS5zaG91bGQuYmUucmVqZWN0ZWQuYW5kLm5vdGlmeShkb25lKTtcbiAgfSk7XG4gIGl0KCdpdCBzaG91bGQgZmFpbCB3aXRoIGEgYmFkIHBhc3N3b3JkJywgZnVuY3Rpb24oZG9uZSkge1xuICAgIHVzZXJzLmRvU2lnbmluKCdyZWdpc3RlcicsICdiYWRwYXNzd29yZCcpLnNob3VsZC5iZS5yZWplY3RlZC5hbmQubm90aWZ5KGRvbmUpO1xuICB9KTtcblxuXG59KTsiXX0=